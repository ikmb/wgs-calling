
// Job paramaters to set for this environment

params.scratch = false

// Resource manager settings

// Process setting

process {

  // Global cluster parameters
  cpus = { check_max( 1 * task.attempt, 'cpus' ) }
  memory = { check_max( 8.GB * task.attempt, 'memory' ) }
  time = { check_max( 2.h * task.attempt, 'time' ) }

  errorStrategy = { task.exitStatus == 143 ? 'retry' : 'finish' }
  maxRetries = 3
  maxErrors = '-1'
 
  // Specific cluster parameters for each process

	 withName:runFastp {
		cpus = params.max_cpus
		time = { check_max( 12.h * task.attempt, 'time' ) }
		memory = { check_max( 8.GB * task.attempt, 'memory' ) }
	}
	withName:runBwa {
		memory = { check_max( 64.GB * task.attempt, 'memory' ) }
		time = { check_max( 96.h * task.attempt, 'time' ) }
		cpus = params.max_cpus
	}
	withName:runFixTags {
		memory = { 48.GB * task.attempt }
		cpus = 2
		time = { 72.h * task.attempt }
	}
	withName:runMarkDuplicates {
		memory = { check_max( 32.GB * task.attempt, 'memory' ) }
		cpus = 2
		time = { check_max( 72.h * task.attempt, 'time' ) }
	}
	withName:runBaseRecalibrator {
		time = { 24.h * task.attempt }
		memory = { 32.GB * task.attempt }
		cpus = 2
	}
	withName:runHCSample {
		time = { check_max( 48.h * task.attempt, 'time' ) }
		memory = { check_max( 16.GB * task.attempt, 'memory' ) }
		cpus = 2
	}
	withName:runGenomicsDBImport {
		time = { check_max( 60.h * task.attempt, 'time' ) }
		memory = { check_max( 32.GB * task.attempt, 'memory' ) }
		cpus = { check_max( 5 * task.attempt, 'cpus' ) }
	}
	withName:runGenotypeGVCFs {
		time = { check_max( 60.h * task.attempt, 'time' ) }
		memory = { check_max( 8.GB * task.attempt, 'memory' ) }
		cpus = 16
	}
	withName:combineVariants {
		time = { check_max( 24.h * task.attempt, 'time' ) }
		memory = { check_max( 16.GB * task.attempt, 'memory' ) }
	}
	withName:combineVariantsFromGenotyping {
		time = { check_max( 24.h * task.attempt, 'time' ) }
		memory = { check_max( 32.GB * task.attempt, 'memory' ) }
	}
	withName:runHardFilterSNP {
		time = { check_max( 72.h * task.attempt, 'time' ) }
		memory = { check_max( 16.GB * task.attempt, 'memory' ) }
	}
	withName:runHardFilterIndel {
		time = { check_max( 72.h * task.attempt, 'time' ) }
		memory = { check_max( 16.GB * task.attempt, 'memory' ) }
	}
	withName:runMergeHardFilterVcf {
		time = { check_max( 72.h * task.attempt, 'time' ) }
		memory = { check_max( 16.GB * task.attempt, 'memory' ) }
	}
	withName:runSplitVcfHardFilter {
		time = { check_max( 24.h * task.attempt, 'time' ) }
		memory = { check_max( 16.GB * task.attempt, 'memory' ) }
	}
	withName:runRecalibrationModeSNP {
		time = { check_max( 24.h * task.attempt, 'time' ) }
		memory = { check_max( 16.GB * task.attempt, 'memory' ) }
	}
	withName:runRecalibrationModeIndel {
		time = { check_max( 16.h * task.attempt, 'time' ) }
		memory = { check_max( 16.GB * task.attempt, 'memory' ) }
	}
	withName:runRecalIndelApply {
		time = { check_max( 8.h * task.attempt, 'time' ) }
		memory = { check_max( 8.GB * task.attempt, 'memory' ) }
	}
	withName:runRecalSNPApply {
		time = { check_max( 12.h * task.attempt, 'time' ) }
		memory = { check_max( 8.GB * task.attempt, 'memory' ) }
	}
	withName:runVariantFiltrationIndel {
		time = { check_max( 6.h * task.attempt, 'time' ) }
		memory = { check_max( 8.GB * task.attempt, 'memory' ) }
	}
	withName:runBaseRecalibratorPostRecal {
		time = { 12.h * task.attempt }
	}
	withName:runApplyBQSR {
		time = { 72.h * task.attempt }
		memory = "28GB"
	}
	withName:runWgsCoverage {
		time = { 12.h * task.attempt }
		memory = { 64.GB * task.attempt }
	}
        withName:runAlignCoverage {
		time = { 12.h * task.attempt }
                memory = { 16.GB * task.attempt }
	}
        withName:runAlignmentStats {
		time = { 12.h * task.attempt }
                memory = { 32.GB * task.attempt }
	}
	withName:runCollectMultipleMetrics {
		time = { 18.h * task.attempt }
		memory = { 16.GB * task.attempt }
	}
	withName:"runMultiQCSample" {
		time = {  4.h * task.attempt }
		memory = "7GB"
	}
	withName:runMultiQCLibrary {
		time = {  4.h * task.attempt }
		memory = "7GB"
	}
	withName:runCollectVariantCallingMetrics {
		time = {  12.h * task.attempt }
		memory = "8GB"
	}
	withName:runGatherBQSRReports {
		time = {  12.h * task.attempt }
		memory = "8GB"
	}
}


