params {

	
	fasta = false
	dbsnp = false
	mills = false
	dict = false
	axiom = false
	intervals = false
	interval_list = false
	
	report = true
	assembly = "GRCh38"

	snp_recalibration_values = [ "QD", "ReadPosRankSum", "FS", "MQ", "SOR", "DP" ]
	indel_recalbration_values = ["FS", "ReadPosRankSum", "QD", "SOR", "DP"]

	recal = false 

	downsampleFactor = 10
	snp_filter_level = 99.7
	indel_filter_level = 99.7

	indel_recalibration_tranche_values = ["100.0", "99.95", "99.9", "99.5", "99.0", "97.0", "96.0", "95.0", "94.0", "93.5", "93.0", "92.0", "91.0", "90.0"]
	snp_recalibration_tranche_values = ["100.0", "99.95", "99.9", "99.8", "99.6", "99.5", "99.4", "99.3", "99.0", "98.0", "97.0", "90.0" ]

	snp_filter_rules = "QD < 2.0 || FS > 60.0 || MQ < 40.0 || MQRankSum < -12.5 || ReadPosRankSum < -8.0"
	indel_filter_rules = "QD < 2.0 || FS > 200.0 || ReadPosRankSum < -20.0"

	scratch = true

	email = false
	plaintext_email = false

	help = false

	format = "cram"

	run_name = false
	
	intervals = false
}

process.container = "ikmb/wgs-calling:1.1"

profiles {
	standard {
		includeConfig 'config/medcluster.config'
		includeConfig 'config/base.config'
                includeConfig 'config/resources.config'
	}
	ikmbnew {
		includeConfig 'config/base.config'
                includeConfig 'config/rzcluster_new.config'
                includeConfig 'config/resources.config'
	}	
	devel {
                includeConfig 'config/base.config'
                includeConfig 'config/rzcluster_new.config'
                includeConfig 'config/resources.config'
                includeConfig 'config/conda.config'
	}

	diagnostic {
                includeConfig 'config/base.config'
                includeConfig 'config/diagnostic.config'
                includeConfig 'config/resources.config'
                includeConfig 'config/singularity.config'
        }
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

manifest {
	homePage = 'https://github.com/ikmb/wgs-calling'
	description = 'This pipeline collection performs best-practice variant calling on WGS data.'
	mainScript = 'main.nf'
	version = '0.1'
	nextflowVersion = '0.18.01'
}

params {
  // Defaults only, expecting to be overwritten
  max_memory = 250.GB
  max_cpus = 20
  max_time = 240.h
  maxMultiqcEmailFileSize = 25.MB
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
